# Set the main path here
export FENICS_HOME=/home/fenics/build
#----------Environment variables---------#
export PATH=${FENICS_HOME}/bin:${PATH}
export LD_LIBRARY_PATH=${FENICS_HOME}/lib:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=${FENICS_HOME}/lib/pkgconfig:$PKG_CONFIG_PATH
export PYTHONPATH=${FENICS_HOME}/lib/python2.7/site-packages:$PYTHONPATH
export MANPATH=${FENICS_HOME}/share/man:$MANPATH
export SRC_DIR=${FENICS_HOME}/src
mkdir -p $FENICS_HOME
mkdir -p $SRC_DIR
#----------Update definitions---------#
pull_ffc () {
    echo "FENICS-BUILDER: Pulling ffc..."
    cd $SRC_DIR
    if [ -d ffc ]
    then
	cd ffc
       	git pull
    else
	git clone https://bitbucket.org/fenics-project/ffc.git
	cd ffc
    fi
}
build_ffc () {
    echo "FENICS-BUILDER: Building ffc..."
    if [ -d $SRC_DIR/ffc ]
    then
	cd $SRC_DIR/ffc
	python setup.py install --prefix=$FENICS_HOME 
    else
	echo "FENICS-BUILDER: ffc source cannot be found. Please run pull_ffc first."
    fi
}
update_ffc () {
    pull_ffc
    build_ffc
}

pull_fiat () {
    echo "FENICS-BUILDER: Pulling fiat..."
    cd $SRC_DIR
    if [ -d fiat ]
    then
	cd fiat
       	git pull
    else
        git clone https://bitbucket.org/fenics-project/fiat.git
	cd fiat
    fi
}
build_fiat () {
    echo "FENICS-BUILDER: Building fiat..."
    if [ -d $SRC_DIR/fiat ]
    then
	cd $SRC_DIR/fiat
	python setup.py install --prefix=$FENICS_HOME 
    else
	echo "FENICS-BUILDER: fiat source cannot be found. Please run pull_fiat first."
    fi
}
update_fiat () {
    pull_fiat
    build_fiat
}

pull_instant () {
    echo "FENICS-BUILDER: Pulling instant..."
    cd $SRC_DIR
    if [ -d instant ]
    then
	cd instant
	git pull
    else
	git clone https://bitbucket.org/fenics-project/instant.git
	cd instant
    fi
}
build_instant () {
    echo "FENICS-BUILDER: Building instant..."
    if [ -d $SRC_DIR/instant ]
    then
	cd $SRC_DIR/instant
	python setup.py install --prefix=$FENICS_HOME 
    else
	echo "FENICS-BUILDER: instant source cannot be found. Please run pull_instant first."
    fi
}
update_instant () {
    pull_instant
    build_instant
}

pull_ufl () {
    echo "FENICS-BUILDER: Updating ufl..."
    cd $SRC_DIR
    if [ -d ufl ]; 
    then
	cd ufl
	git pull
    else
	git clone https://bitbucket.org/fenics-project/ufl.git
	cd ufl
    fi
}
build_ufl () {
    echo "FENICS-BUILDER: Building ufl..."
    if [ -d $SRC_DIR/ufl ]
    then
	cd $SRC_DIR/ufl
	python setup.py install --prefix=$FENICS_HOME 
    else
	echo "FENICS-BUILDER: ufl source cannot be found. Please run pull_ufl first."
    fi
}
update_ufl () {
    pull_ufl
    build_ufl
}

pull_uflacs () {
    echo "FENICS-BUILDER: Updating uflacs..."
    cd $SRC_DIR
    if [ -d uflacs ]; 
    then
	cd uflacs
	git pull
    else
	git clone https://bitbucket.org/fenics-project/uflacs.git
	cd uflacs
    fi
}
build_uflacs () {
    echo "FENICS-BUILDER: Building ufl..."
    if [ -d $SRC_DIR/uflacs ]
    then
	cd $SRC_DIR/uflacs
	python setup.py install --prefix=$FENICS_HOME 
    else
	echo "FENICS-BUILDER: uflacs source cannot be found. Please run pull_uflacs first."
    fi
}
update_uflacs () {
    pull_uflacs
    build_uflacs
}


pull_dolfin () {
    echo "FENICS-BUILDER: Updating dolfin..."
    cd $SRC_DIR
    if [ -d dolfin ]; 
    then
	cd dolfin
	git pull
    else
	git clone https://bitbucket.org/fenics-project/dolfin.git
	cd dolfin
    fi
}
build_dolfin () {
    echo "FENICS-BUILDER: Building dolfin..."
    if [ -d $SRC_DIR/dolfin ]
    then
    	cd $SRC_DIR/dolfin
	mkdir -p build
    	cd build
    	cmake ../ -DCMAKE_INSTALL_PREFIX=$FENICS_HOME -Wno-dev
    	make
    	make install
    else
	echo "FENICS-BUILDER: dolfin source cannot be found. Please run pull_dolfin first."
    fi
}
update_dolfin () {
    pull_dolfin
    build_dolfin
}

pull_mshr () {
    echo "FENICS-BUILDER: Pulling mshr..."
    cd $SRC_DIR
    if [ -d mshr ]
    then
	cd mshr
       	git pull
    else
        git clone https://bitbucket.org/benjamik/mshr.git
	cd mshr
    fi
}

build_mshr () {
    echo "FENICS-BUILDER: Building mshr..."
    if [ -d $SRC_DIR/mshr ]
    then
    	cd $SRC_DIR/mshr
	mkdir -p build
    	cd build
    	cmake ../ -DCMAKE_INSTALL_PREFIX=$FENICS_HOME -Wno-dev
    	make
    	make install
    else
	echo "FENICS-BUILDER: mshr source cannot be found. Please run pull_mshr first."
    fi
}
update_mshr () {
    pull_mshr
    build_mshr
}

pull_fenics () {
    pull_ffc
    pull_fiat
    pull_instant
    pull_ufl
    pull_uflacs
    pull_dolfin
    pull_mshr
}
build_fenics () {
    build_ffc
    build_fiat
    build_instant
    build_ufl
    build_uflacs
    build_dolfin
    build_mshr
}
update_fenics () {
    pull_fenics
    build_fenics
    cd "${FENICS_HOME}/.."
    printf "\033c"
    echo "FEniCS compilation has finished. "
    echo "Environment variables are already set up automatically."
    echo ""
    echo "Try some demos in"
    echo "    ${FENICS_HOME}/share/dolfin/demo"
    echo ""
    echo "The full build is in ${FENICS_HOME} inside the container,"
    echo "and in the 'shared' directory on the host."
    echo "" 
    echo "The typical work flow is to edit the source code on the host,"
    echo "then rebuild FEniCS in the container by executing:"
    echo "    build_fenics"
    echo "and then test/use FEniCS user programs inside the container."
    echo ""
    echo "Please note that only changes in the directory '/home/fenics' in"
    echo "the container is saved and accessible on the host."
    echo "" 
    echo "To exit, simply run 'exit'."
}   
