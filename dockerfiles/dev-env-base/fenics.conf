#!/bin/bash
# Environment variables that you may wish to control.
# FENICS_VERSION={1.6.0,unset}
# FENICS_BUILD_TYPE={Debug,Release}

# Environment variables that should be set in the containers
# dev-env-py3 and dev-env already.
# FENICS_PYTHON_MAJOR_VERSION={2,3}
# FENICS_PYTHON_MINOR_VERSION={7,4}

# Make directories
mkdir -p $FENICS_HOME
mkdir -p $SRC_DIR
mkdir -p ${FENICS_HOME}/lib/python${FENICS_PYTHON_MAJOR_VERSION}.${FENICS_PYTHON_MINOR_VERSION}/site-packages

# Create symbolic link ${FENICS_HOME}/bin/python ->
# /usr/bin/python${FENICS_PYTHON_MAJOR_VERSION} and
# the same for ipython.
if [ ! -e ${FENICS_HOME}/bin/python ]
then
    mkdir -p ${FENICS_HOME}/bin
    ln -s /usr/bin/python${FENICS_PYTHON_MAJOR_VERSION} ${FENICS_HOME}/bin/python
fi
if [ ! -e ${FENICS_HOME}/bin/ipython ]
then
    mkdir -p ${FENICS_HOME}/bin
    echo -e"#!/bin/sh\nexec ${FENICS_HOME}/bin/python -m IPython" > ${FENICS_HOME}/bin/ipython
fi

# Sensible default.
if [ ! -v FENICS_BUILD_TYPE ]
then
    export FENICS_BUILD_TYPE="Release"
fi

#----------Update definitions---------#
pull_ffc () {
    echo "FENICS-BUILDER: Pulling ffc..."
    cd $SRC_DIR
    if [ -d ffc ]
    then
	    cd ffc
       	git pull
    else
	    git clone https://bitbucket.org/fenics-project/ffc.git
        cd ffc
        if [ -v FENICS_VERSION ]
        then
            git checkout ffc-${FENICS_VERSION}
        fi
    fi
}
build_ffc () {
    echo "FENICS-BUILDER: Building ffc..."
    if [ -d $SRC_DIR/ffc ]
    then
	    cd $SRC_DIR/ffc
	    python${FENICS_PYTHON_MAJOR_VERSION} setup.py install --prefix=$FENICS_HOME
    else
	    echo "FENICS-BUILDER: ffc source cannot be found. Please run pull_ffc first."
    fi
}
update_ffc () {
    pull_ffc
    build_ffc
}

pull_fiat () {
    echo "FENICS-BUILDER: Pulling fiat..."
    cd $SRC_DIR
    if [ -d fiat ]
    then
	    cd fiat
       	git pull
    else
        git clone https://bitbucket.org/fenics-project/fiat.git
        cd fiat
        if [ -v FENICS_VERSION ]
        then
            git checkout fiat-${FENICS_VERSION}
        fi
    fi
}
build_fiat () {
    echo "FENICS-BUILDER: Building fiat..."
    if [ -d $SRC_DIR/fiat ]
    then
	    cd $SRC_DIR/fiat
	    python${FENICS_PYTHON_MAJOR_VERSION} setup.py install --prefix=$FENICS_HOME
    else
	    echo "FENICS-BUILDER: fiat source cannot be found. Please run pull_fiat first."
    fi
}
update_fiat () {
    pull_fiat
    build_fiat
}

pull_instant () {
    echo "FENICS-BUILDER: Pulling instant..."
    cd $SRC_DIR
    if [ -d instant ]
    then
	    cd instant
	    git pull
    else
	    git clone https://bitbucket.org/fenics-project/instant.git
	    cd instant
        if [ -v FENICS_VERSION ]
        then
            git checkout instant-${FENICS_VERSION}
        fi
    fi
}
build_instant () {
    echo "FENICS-BUILDER: Building instant..."
    if [ -d $SRC_DIR/instant ]
    then
	    cd $SRC_DIR/instant
	    python${FENICS_PYTHON_MAJOR_VERSION} setup.py install --prefix=$FENICS_HOME
    else
	    echo "FENICS-BUILDER: instant source cannot be found. Please run pull_instant first."
    fi
}
update_instant () {
    pull_instant
    build_instant
}

pull_ufl () {
    echo "FENICS-BUILDER: Updating ufl..."
    cd $SRC_DIR
    if [ -d ufl ];
    then
	    cd ufl
	    git pull
    else
	    git clone https://bitbucket.org/fenics-project/ufl.git
	    cd ufl
        if [ -v FENICS_VERSION ]
        then
            git checkout ufl-${FENICS_VERSION}
        fi
    fi
}
build_ufl () {
    echo "FENICS-BUILDER: Building ufl..."
    if [ -d $SRC_DIR/ufl ]
    then
	    cd $SRC_DIR/ufl
	    python${FENICS_PYTHON_MAJOR_VERSION} setup.py install --prefix=$FENICS_HOME
    else
	    echo "FENICS-BUILDER: ufl source cannot be found. Please run pull_ufl first."
    fi
}
update_ufl () {
    pull_ufl
    build_ufl
}

pull_dolfin () {
    echo "FENICS-BUILDER: Updating dolfin..."
    cd $SRC_DIR
    if [ -d dolfin ];
    then
	    cd dolfin
	    git pull
    else
	    git clone https://bitbucket.org/fenics-project/dolfin.git
	    cd dolfin
        if [ -v FENICS_VERSION ]
        then
            git checkout dolfin-${FENICS_VERSION}
        fi
    fi
}
build_dolfin () {
    echo "FENICS-BUILDER: Building dolfin..."
    if [ -d $SRC_DIR/dolfin ]
    then
    	cd $SRC_DIR/dolfin
	    mkdir -p build
    	cd build
    	cmake ../ -DCMAKE_INSTALL_PREFIX=${FENICS_HOME} -DCMAKE_BUILD_TYPE=${FENICS_BUILD_TYPE} -DPYTHON_EXECUTABLE:FILEPATH=${FENICS_HOME}/bin/python -Wno-dev
    	make
    	make install
    else
	    echo "FENICS-BUILDER: dolfin source cannot be found. Please run pull_dolfin first."
    fi
}
update_dolfin () {
    pull_dolfin
    build_dolfin
}

pull_mshr () {
    echo "FENICS-BUILDER: Pulling mshr..."
    cd $SRC_DIR
    if [ -d mshr ]
    then
	    cd mshr
       	git pull
    else
        git clone https://bitbucket.org/fenics-project/mshr.git
	    cd mshr
        if [ -v FENICS_VERSION ]
        then
            git checkout mshr-${FENICS_VERSION}
        fi
    fi
}
build_mshr () {
    echo "FENICS-BUILDER: Building mshr..."
    if [ -d $SRC_DIR/mshr ]
    then
    	cd $SRC_DIR/mshr
	    mkdir -p build
    	cd build
    	cmake ../ -DCMAKE_INSTALL_PREFIX=$FENICS_HOME -DCMAKE_BUILD_TYPE=$FENICS_BUILD_TYPE -DPYTHON_EXECUTABLE:FILEPATH=${FENICS_HOME}/bin/python -Wno-dev
    	make
    	make install
    else
	    echo "FENICS-BUILDER: mshr source cannot be found. Please run pull_mshr first."
    fi
}
update_mshr () {
    pull_mshr
    build_mshr
}

pull_fenics () {
    pull_fiat
    pull_instant
    pull_ufl
    pull_ffc
    pull_dolfin
}
build_fenics () {
    build_fiat
    build_instant
    build_ufl
    build_ffc
    build_dolfin
}
update_fenics () {
    pull_fenics
    build_fenics
    cd "${FENICS_HOME}/.."
    printf "\033c"
    echo "FEniCS compilation has finished. "
    echo "Environment variables are already set up automatically."
    echo ""
    echo "Try some demos in"
    echo "    ${FENICS_HOME}/share/dolfin/demo"
    echo ""
    echo "The full build is in ${FENICS_HOME} inside the container."
}
