#!/usr/bin/env bash
#
# This script wraps Docker commands to simplify the use of FEniCS Docker images.

# Config
IMAGE_HOST="quay.io/fenicsproject"
DEFAULT_IMAGE="stable"
CACHE_DIR_CONTAINER="/home/fenics/.instant"
PROJECT_DIR_HOST=$(pwd)
# Workaround for issue https://github.com/docker/docker/issues/9299
DEFAULT_COMMAND="/bin/bash -l -c 'export TERM=xterm; bash -i'"
OS=$(uname -s)

# Set host cache dir
CACHE_DIR_HOST=$INSTANT_CACHE_DIR
: ${CACHE_DIR_HOST:="$HOME/.instant"}

# Setup
set -e
RED="\033[1;31m"
GREEN="\033[1;32m"
BLUE="\033[1;34m"
NORMAL="\033[0m"

help ()
{
    echo "Usage: fenicsproject <command> [options]"
    echo ""
    echo "  fenicsproject run [image] [command]   - run a simple FEniCS session"
    echo "  fenicsproject create <name> [image]   - create standard project with given name"
    echo "  fenicsproject notebook <name> [image] - create notebook project with given name"
    echo "  fenicsproject start <name>            - start session in project with given name"
    echo "  fenicsproject list                    - list all projects"
    echo "  fenicsproject clean-cache [image]     - clean the shared FEniCS (Instant) cache"

    echo ""
    echo "Use 'fenicsproject run' for simple (non-persistent) FEniCS sessions."
    echo ""
    echo "For persistent sessions, use 'create' or 'notebook' followed by 'start'"
    echo "to (re)start a session."
    echo ""
    echo "Available images:"
    echo ""
    echo "  stable  - latest stable release [default]"
    echo "  dev     - latest development version, master branch"
    echo "  dev-env - development environment including dependencies but not FEniCS"
    echo ""
    echo "For more details and tips, see our FEniCS Docker page:"
    echo ""
    echo "  http://fenics-containers.readthedocs.org/en/latest/"
    echo ""
}

command ()
{
    echo "[$@]"
    echo ""
    eval $@
}

command-swallow-stderr ()
{
    echo "[$@]"
    echo ""
    eval $@ 2> /dev/null
}

run ()
{
    # Select image
    IMAGE="$1"
    : ${IMAGE:="$DEFAULT_IMAGE"}

    # Select command (if any)
    if [ $# -ge 2 ]; then
        shift
        COMMAND="$@"
        : ${COMMAND:="$DEFAULT_COMMAND"}
    fi

    # Pull image
    CMD="docker pull $IMAGE_HOST/$IMAGE"
    command $CMD

    # Setup a container for instant cache
    create-cache-container $IMAGE

    # Run container
    CMD="docker run --rm -ti \
           -v instant-cache-$IMAGE:/home/fenics/.instant \
           -v $PROJECT_DIR_HOST:/home/fenics/shared \
           -w /home/fenics/shared \
           $IMAGE_HOST/$IMAGE $COMMAND"
    command $CMD
}

create-cache-container ()
{
    IMAGE="$1"
    CMD="docker volume create --name instant-cache-${IMAGE}"
    command $CMD
}

clean-cache ()
{
    IMAGE="$1"
    CMD="docker volume rm instant-cache-$IMAGE"
    command-swallow-stderr $CMD || echo "No Instant cache exists, doing nothing."
}

create ()
{
    NAME="$1"
    echo -e "Creating new ${GREEN}FEniCS Project${NORMAL} terminal project ${BLUE}$NAME${NORMAL}."
    echo ""

    # Select image
    IMAGE="$2"
    : ${IMAGE:="$DEFAULT_IMAGE"}

    # Pull image
    CMD="docker pull $IMAGE_HOST/$IMAGE"
    command $CMD

    # Create the container
    create-cache-container $IMAGE
    CMD="docker create -ti --name $NAME \
           -v instant-cache-${IMAGE}:$CACHE_DIR_CONTAINER \
           -v $PROJECT_DIR_HOST:/home/fenics/shared \
           -w /home/fenics/shared \
           $IMAGE_HOST/$IMAGE $DEFAULT_COMMAND"
    command $CMD

    # Print summary
    echo ""
    echo -e "To ${BLUE}start the session${NORMAL}, type the following command:"
    echo ""
    echo "  fenicsproject start $NAME"
    echo ""
    echo "You will find the current working directory under ~/shared."
}

start ()
{
    NAME="$1"

    # Determine whether container is already running
    # If not, then start a new session (bash or notebook).
    # If it is, then launch a new bash login terminal.
    IS_RUNNING=$(docker inspect -f '{{.State.Running}}' $NAME 2>/dev/null)
    SESSION_TYPE=$(docker inspect -f '{{index .Config.Labels "org.fenicsproject.session_type" }}' $NAME 2>/dev/null)
    if [ "$IS_RUNNING" == "false" ]; then
        echo "Starting project named $NAME."
        CMD="docker start $NAME"
        command $CMD
        # Some SSH tunneling to get the Jupyter session available for people
        # on Mac OS X and Windows (Cygwin). We only expose out to localhost
        # for security.
        PORT=$(docker port $NAME 8888 | cut -d: -f2)
        if [[ "$SESSION_TYPE" == "notebook" && ( "$OS" == "Darwin" || "$OS" == "Cygwin" ) ]]; then
            # Ask Docker for the port mapping.
            ACTIVE_MACHINE=$(docker-machine active)
            CMD="docker-machine ssh $ACTIVE_MACHINE -fN -L localhost:$PORT:localhost:$PORT"
            command $CMD
        fi
        echo -e "${BLUE}You can access the Jupyter notebook at http://localhost:${PORT}${NORMAL}"
        cleanup_ssh () {
            if [[ "$OS" == "Darwin" || "$OS" == "Cygwin" ]]; then
                # Find the running ssh PID that created our tunnel and kill it.
                PID=$(ps -ax | grep ssh | grep $PORT:localhost:$PORT | awk '{print $1}')
                kill $PID
            fi
        }
        # Manually cleanup ssh port forwarding on terminate signal.
        trap cleanup_ssh SIGINT
        CMD="docker attach $NAME"
        command $CMD
    else
        echo "Starting new session in project named $NAME."
        CMD="docker exec -ti $NAME $DEFAULT_COMMAND"
        command $CMD
    fi
}

list ()
{
    CMD="docker ps -a --format '{{ .Names }} @{{ .Image }} @{{ .Status }}' | column -t -s='@'"
    command $CMD
}

notebook ()
{
    # Select image
    IMAGE="$2"
    : ${IMAGE:="$DEFAULT_IMAGE"}

    NAME="$1"
    echo -e "Creating new ${GREEN}FEniCS Project${NORMAL} notebook project ${BLUE}$NAME${NORMAL}."
    echo ""

    # Setup a container for instant cache
    create-cache-container $IMAGE

    # Run container. We only expose out to localhost for security.
    CMD="docker create -p 127.0.0.1:3000-4000:8888 \
           -v instant-cache-$IMAGE:/home/fenics/.instant \
           -v $PROJECT_DIR_HOST:/home/fenics/shared \
           -w /home/fenics/shared \
           --label org.fenicsproject.session_type='notebook' \
           --name $NAME \
           $IMAGE_HOST/$IMAGE 'jupyter-notebook --ip=0.0.0.0'"
    command $CMD

    # Print summary
    echo ""
    echo -e "To ${BLUE}start the session${NORMAL}, type the following command:"
    echo ""
    echo "  fenicsproject start $NAME"
    echo ""
}

# Check command-line arguments
if [ "$1" == "run" ]; then
    run $2 $3
elif [ "$1" == "create" ]; then
    create $2 $3
elif [ "$1" == "notebook" ]; then
    notebook $2 $3
elif [ "$1" == "start" ]; then
    start $2
elif [ "$1" == "list" ]; then
    list
elif [ "$1" == "clean-cache" ]; then
    clean-cache $2
else
    help
    exit 1
fi
